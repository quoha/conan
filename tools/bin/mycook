#!/bin/bash
##############################################################################
# conan - the brute force CGI
# Copyright (c) 2011 Michael D Henderson
#
# This file is part of conan (http://github.com/quoha/conan).
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################
# PROGRAM: mycook
#  AUTHOR: Michael D Henderson
#   DESCR: Searches up the directory tree looking for the Howto.cook file.
#          Once found, it runs the cook command with the parameters given.
#          Note that if the first parameter is 'edit' then we will not run
#          the cook command. Instead, we will edit the Howto.cook file.
##############################################################################
# OPTIONS: edit -> if specified, will edit the Howto.cook file instead of
#                  running it
##############################################################################
# local variables
cookFile=Howto.cook    # file to search for (this is the default for cook)
retVal=1               # assume that we will fail (0 == success, 1 == failure)
##############################################################################
# search up the tree for the cook file. we will loop until we find the root
# directory or we find the cook file.
while [ "${PWD}" != "/" ]   # loop until we hit the root directory
do
  if [ ! -f "${cookFile}" ] # look for the file in the current directory
  then
    #
    # we did not find the cook file, so move up one level in the
    # directory tree. we will keep doing this until we find the
    # file or end up in the root directory
    #
    cd ..                   # move up one level in the directory tree
  else
    #
    # if the first command line parameter is 'edit' then we will
    # edit the file, otherwise we will run the cook command and
    # pass it all of the command line parameters. either way, we
    # will set our exit status variable to the status of the
    # command that we ran.
    #
    if [ "${1}" == edit ]   # check first parameter for value of 'edit'
    then
      vi "${cookFile}"      # edit the cook file
      retVal=$?             # set the exit status variable
    else
      echo " info: running ${PWD}/${cookFile}"
      cook $*               # run the cook command with parameters
      retVal=$?             # set the exit status variable
    fi
    break                   # found file, so exit the while loop
  fi
done
##############################################################################
# exit with our status (0 == success, any other is failure)
exit ${retVal}
